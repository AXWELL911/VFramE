{"version":3,"sources":["components/SearchBar.jsx","API/Api.jsx","shared/UI/Card.jsx","shared/UI/Backdrop.js","shared/UI/Modal.js","components/ImageList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SearchBar","state","value","onChangeHandler","event","setState","target","onSubmitHandler","preventDefault","props","submitHandler","className","onSubmit","this","type","placeholder","onChange","Component","axios","create","baseURL","headers","Authorization","Card","style","marginTop","children","Backdrop","console","log","ReactDOM","createPortal","onClick","document","getElementById","ModalOverlay","image","onCancel","content","data-dismiss","src","alt","Modal","show","Fragment","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","ImageList","useState","modal","setmodal","setimage","frames","imageList","map","m","key","id","urls","small","img","documentElement","overflowY","count","class","App","setCount","a","API","get","params","query","response","data","results","length","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.54c2a16e.chunk.js","sourcesContent":["/* jshint ignore:start */\r\nimport React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  \r\n  state = { value: \"\" };\r\n\r\n  onChangeHandler = (event) => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n\r\n  onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.submitHandler(this.state.value);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <form onSubmit={this.onSubmitHandler}>\r\n            <div className=\"form-group\">\r\n              <label>\r\n                <b>Image Search</b>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Search Keywords\"\r\n                value={this.state.value}\r\n                onChange={this.onChangeHandler}\r\n              />\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","/* jshint ignore:start */\r\nimport axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: `https://api.unsplash.com/`,\r\n  headers: {\r\n    Authorization: \"Client-ID x2RGQrvkUynugudkLctCKsj89_g_qjgF3JjEJWvdbws\",\r\n  },\r\n});","/* jshint ignore:start */\r\n\r\nimport React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"col-sm-3\" style={{ marginTop: \"10px\" }}>\r\n      <div className=\"card img-fluid\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","/* jshint ignore:start */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  console.log(props);\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","/* jshint ignore:start */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport Backdrop from \"./Backdrop\";\nimport \"./Modal.css\";\n\nconst ModalOverlay = (props) => {\n  console.log(props);\n  const { image, onCancel } = props;\n  const content = (\n    <div className=\"modal\">\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"modal\"\n        onClick={onCancel}>\n        &times;\n      </button>\n      <div className=\"header\">Picture</div>\n      <div className=\"modal__content\">\n        <img src={image} alt=\"img\" className=\"img\" />\n      </div>\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById(\"modal-hook\"));\n};\n\nconst Modal = (props) => {\n  const { show, onCancel } = props;\n  return (\n    <React.Fragment>\n      {show && <Backdrop onClick={onCancel} />}\n      <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        className=\"modal\">\n        <ModalOverlay {...props} />\n      </CSSTransition>\n    </React.Fragment>\n  );\n};\n\nexport default Modal;\n","/* jshint ignore:start */\r\nimport React, { useState } from \"react\";\r\nimport Card from \"../shared/UI/Card\";\r\nimport \"./ImageList.css\";\r\nimport Modal from \"../shared/UI/Modal\";\r\n\r\nconst ImageList = (props) => {\r\n  const [modal, setmodal] = useState(false);\r\n  const [image, setimage] = useState();\r\n\r\n  const showModal = (img) => {\r\n    setimage(img);\r\n      document.documentElement.style.overflowY = \"hidden\";\r\n    setmodal(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    document.documentElement.style.overflowY = \"visible\";\r\n    setmodal(false);\r\n  };\r\n\r\n  const frames = props.imageList.map((m) => {\r\n    return (\r\n        <Card key={m.id}>\r\n          <img\r\n            src={m.urls.small}\r\n            className=\"frame\"\r\n            alt=\"cars\"\r\n            onClick={() => showModal(m.urls.small)}\r\n          />\r\n        </Card>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"row\">\r\n        {frames}\r\n        {props.count === 0 && (\r\n          <div class=\"col-sm-12 col-md-12 col-lg-12 col-12 alert-height\">\r\n            <div class=\"alert alert-danger text-center\">\r\n              <strong>No Images found</strong>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {modal && <Modal image={image} show={modal} onCancel={closeModal} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ImageList;\r\n","/* eslint-disable no-const-assign */\n/* jshint ignore:start */\nimport React, { useState } from \"react\";\nimport './App.css';\nimport SearchBar from \"./components/SearchBar\";\nimport API from \"./API/Api\";\nimport ImageList from \"./components/ImageList\";\n\nconst App = () => {\n  const [state, setState] = useState([]);\n  const [count, setCount] = useState(null);\n  const submitHandler = async (value) => {\n    const response = await API.get(\"search/photos\", {\n      params: { query: value },\n    });\n\n    setState(response.data.results);\n    setCount(response.data.results.length);\n  };\n\n  return (\n    <div className=\"container\" style={{ marginTop: \"10px\" }}>\n      <div className=\"header\">FindAny#Frame</div>\n      <SearchBar submitHandler={submitHandler} />\n      <ImageList imageList={state} count={count} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* jshint ignore:start */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}